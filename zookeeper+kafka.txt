########################################################################zookeeper###################################################################

1.默认端口2181 ：clientPort=2181
2.配置文件：./conf/zoo.cfg
2.启动脚本：./bin/zkServer.sh start
3.启动脚本：./bin/zkServer.sh stop
4.查看启动状态：./bin/zkServer.sh status
5.集群配置：
server.id=host：port1：port2
例如：
真集群：
	server.1=ip:2888:3888
	server.2=ip:2888:3888
伪集群：
	端口不同：clientPort=2181
	server.1=内网IP:2888:3888
	server.2=内网IP:2999:3999
伪集群需要增加admin.serverPort的端口配置，默认8080
	
id：被称为service ID，用来标识机器在集群中机器序号，同时，在每台zookeeper机器上，需要在数据目录（dataDir参数指定的那个目录下）创建一个myid的文件，文件只要一行内容，并且是一个数字，即对应每台服务器的serverID的数字；
port1：表示的是这个服务器与集群中的 Leader服务器交换信息的端口；
port2：表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。
如果是伪集群的配置方式，由于 host 都是一样， 所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号；

集群分布：
47.102.46.30  root clientPort=2181  myid=1
47.102.46.30  lll  clientPort=2182  myid=2
47.102.46.30  sgf  clientPort=2183  myid=3

####################################################################kafka##########################################################################

1.默认端口9092 ：listeners=PLAINTEXT://内网IP:9092   advertised.listeners=PLAINTEXT://公网IP:9092   ip配置参考网址：https://blog.csdn.net/lee9289/article/details/83213344
2.连接zookeeper集群配置：zookeeper.connect=lllsgf01:2181,lllsgf01:2191
3.启动命令：bin/kafka-server-start.sh config/server.properties    后台启动：bin/kafka-server-start.sh -daemon config/server.properties 
4.停止命令：bin/kafka-server-stop.sh config/server.properties
5.集群配置：
	broker.id=1 （broker.id 是唯一标识符，而且是每一个集群的唯一值）
	listeners=PLAINTEXT://内网IP:9092   （伪集群需要端口不同）
	advertised.listeners=PLAINTEXT://公网IP:9092（伪集群需要端口不同）
	log.dirs=/root/kafka/kafka-logs 
	
集群分布：	
zookeeper.connect=47.102.46.30:2181,47.102.46.30:2182,47.102.46.30:2183
bootstrap-server=47.102.46.30:9092,47.100.76.176:9092,47.100.76.176:9093
47.102.46.30  root  broker.id=0 端口：9092
47.100.76.176 root  broker.id=1 端口：9092
47.100.76.176 lll   broker.id=2 端口：9093


6.创建一个主题：3个分区，2个副本
./kafka-topics.sh --create --zookeeper 47.102.46.30:2181,47.102.46.30:2182,47.102.46.30:2183 --topic first --partitions 2 --replication-factor 2

7.查看主题信息
./kafka-topics.sh --zookeeper 47.102.46.30:2181,47.102.46.30:2182,47.102.46.30:2183 --list
./kafka-topics.sh --zookeeper 47.102.46.30:2181,47.102.46.30:2182,47.102.46.30:2183 --describe --topic first  

8.命令创建消费者
./kafka-console-consumer.sh --bootstrap-server 47.102.46.30:9092,47.100.76.176:9092,47.100.76.176:9093 --topic first --from-beginning

9.创建生产者
./kafka-console-producer.sh --broker-list 47.102.46.30:9092,47.100.76.176:9092,47.100.76.176:9093 --topic first

10.spring-kafka API记录

Kafka 为我们提供了默认的分区策略，同时它也支持自定义分区策略。其路由机制为：
① 若发送消息时指定了分区（即自定义分区策略），则直接将消息append到指定分区；
② 若发送消息时未指定 patition，但指定了 key（kafka允许为每条消息设置一个key），则对key值进行hash计算，根据计算结果路由到指定分区，这种情况下可以保证同一个 Key 的所有消息都进入到相同的分区；
③  patition 和 key 都未指定，则使用kafka默认的分区策略，轮询选出一个 patition；

自定义分区策略：
新建一个分区器类实现Partitioner接口，重写方法，其中partition方法的返回值就表示将消息发送到几号分区；

消息过滤器（可以在消息抵达consumer之前被拦截）：
配置消息过滤只需要为 监听器工厂 配置一个RecordFilterStrategy（消息过滤策略），返回true的时候消息将会被抛弃，返回false时，消息能正常抵达监听容器。






